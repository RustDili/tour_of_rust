- title: Bölüm 3 - Temel Veri Yapıları
  content_markdown: >
    Temel türlerin ötesini keşfetme zamanı geldi! 
    
    Bu bölümde, Rust'un daha ilkel veri yapılarına ve özellikle bunların bellekte nasıl temsil 
    edildiklerine odaklanırken, 
    
    işlerin arka planda örtük biçimde değil, açıkça yürütülmesini takdir edeceğinizi düşünüyorum.
- title: Yapılar
  content_markdown: >
    Dilimize **yapı** olarak çevirebileceğimiz `struct` veri alanlarından oluşan bir koleksiyondur.


    **Yapı alanı** ise, herhangi bir veri türüyle ilişkilendirilmiş değer anlamına gelir. 
    Bu değer, temel türlerden oluşabileceği gibi, `enum` türlerinden veya başka veri yapılarından da oluşabilir.


    Bir derleyici için yapı, bellekteki alanların birbirine ne kadar yakın yerleştirileceğini belirten şemaya benzer.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=222882553c5c99a43dec043ae2d747f9
- title: Çağrı Yöntemleri
  content_markdown: >
    İşlevlere benzemelerine rağmen yöntemlerin belirli bir veri türüyle ilişkisi vardır.


    **Statik yöntemler** — türün kendisine ait olan ve `::` işleciyle çağrılan yöntemlerdir.


    **Örnek yöntemleri** - halihazırda oluşturulmuş bir tür örneğine ait olan ve `.` işleciyle çağrılan yöntemlerdir.


    Kendi yöntemlerinizi nasıl oluşturacağınızı ilerleyen bölümlerde değineceğiz.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fb0ece472c8d870680b12df6bc27d115
- title: Bellek
  content_markdown: >
   Rust programlarında veriler belleğin üç ayrı bölgesinde depolanırlar:

    * **Data memory** - Belleğin Veri Bölgesi olarak telaffuz edebileceğimiz bu bölüm, programın yaşam 
      süresi boyunca kullanılabilecek sabit uzunluktaki **statik** veriler için kullanılır. 
      İlk rust programımızda ekrana yazdırdığımız "Merhaba Dünya!" cümlesi, aslında değiştirilemeyen 
      ve sadece bir yerden okunabilen bir byte koleksiyonu olduğundan bu bölgeye yerleştirilir. 
      Belirgin konumları ve sabit uzunlukları ile derleyicilerin pek çok iyileştirme yapabildiği bu 
      verilerin saklandığı *veri bölümü** çok hızlı olarak kabul edilir.
      
      
    * **Stack memory** - Belleğin Yığın Bölgesi olarak telaffuz edebileceğimiz bu bölüm, bir işlev içinde 
      değişken olarak bildirilen verilerin tutulduğu bölgedir. Belleğin bu konumu işlev çağrısı süresince 
      asla değişmediğinden, bu verilere erişim hızı, derleyici iyileştirmeleri sayesinde oldukça arttırılır. 
    
    
    * **Heap memory** - Belleğin Öbek bölgesi şeklinde telaffuz edebileceğimiz bu bölüm, Uygulama çalışırken 
      yani **çalışma zamanında** oluşturulan veriler içindir. Bu bölgedeki veriler eklenebilir, taşınabilir, 
      silinebilir, yeniden boyutlandırılabilir. Dinamik yapısı nedeniyle, genellikle yığından daha yavaş 
      kullanılsa da, belleğin daha yaratıcı kullanılmasına olanak sağlar. Bu bölgeye veri ekleme işlemine 
      **bellek ayırma** bu bölümden veri silme işlemine de **belleği iade etme** adını veriyoruz.
- title: Bellekte Veri Oluşturmak
  content_markdown: >
    Bir yapıyı **örneklediğimizde** o yapının birbiriyle ilişkili alanları programımız tarafından bellekte 
    yan yana gelecek şekilde oluşturulur.


    Yapının örneklenmesi, yani başlatılması aşağıdaki sözdizimi ile gerçekleşir: 


    `YapininAdi {alan1, alan2, ...}`.


    Yapı alanlarına `.` nokta işleci kullanılarak erişilir.


    Örneğimiz için bellek aşağıdaki gibi şekillenecektir:

    * "Ferris" gibi tırnak içindeki metinler, salt okunur veriler 
      olduğundan **Belleğin Veri Bölgesi**ne yerleştirilir.
    * `String::from` işlevine yapılan çağrı, yığındaki DenizCanlisi 
      alanlarıyla yan yana yerleştirilen bir `String` yapısı oluşturur. 
      String, değiştirilebilir metni temsil eder ve bu değişim şu 
      şekilde mümkün olur:
      1. Öbek bölgesi üzerinde ayrılan belleğin boyutu değişebilir 
      olduğundan, metin için *heap* üzerinde düzenlenebilir bellek alanı 
      ayrılır.
      2. Öbek üzerinde ayrılmış bulunan bu bellek konumuna bir başvuru 
      oluşturulur ve bu başvuru bir `String` yapısı olarak saklanır 
      *(Bu konuya daha sonra değineceğiz)*.
    * Nihayetinde, *Ferris* ve *Sarah* adlarındaki bu arkadaşlarımız, 
    bellekte her zaman sabit bir konumda bulunacaklarından, belleğin 
    *stack memory* yani yığın bölümüne yerleştirilecek veri yapılarına sahip olacaklardır.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=706295cdac14dbc8beaf8fc4967c1efe
- title: Çokuzlu Benzeri Yapılar 
  content_markdown: |
    Daha kısa ve pratik olmak isterseniz çokuzlu benzeri yapılar kullanabilirsiniz.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2787ca42bcd61218745843b1adeeb3bf
- title: Birim Benzeri Yapılar
  content_markdown: >
    Herhangi bir üyeye sahip olmayan bu yapı türü boş bir çokuzluya benzer.


    Bölüm 1'de bahsedildiği gibi *birim* aslında boş bir çokuzlunun `()` 
    diğer adı olduğundan bu tür yapılara *Birim benzeri* yapılar adı verilir.


    Bu tür yapılar nadiren kullanılmakla beraber, içlerinde veri tutmadıklarından, 
    uygulamalara özellik eklerken faydalıdırlar.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e5f9c04919adb415abaf802dde54671a
- title: Numaralandırmalar
  content_markdown: >
    `enum` anahtar sözcüğüyle tanımlanan ve kapsamında sıralanan olası 
    değerler listesinden, değerleri belirli yeni bir tür oluşturmanıza 
    olanak sağlayan yapılardır.


    Rust'ın örüntü eşleme modelinde kullanılan `match` anahtar sözcüğü, 
    tüm olası enum değerlerinin kapsamlı bir şekilde işlenmesine yardımcı 
    olduğundan, kaliteli kod üretiminde güçlü bir araçtır.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=373c6a6604cd9ddd4de6f16d380a70e5
- title: Veriler ve Numaralandırmalar
  content_markdown: >
    `enum` öğeleri C'deki *birlik*ler gibi davranmalarına izin veren 
    bir veya daha fazla veri türüne sahip olabilir.


    Bir `enum` örüntü eşleme modelindeki `match` yardımıyla eşleştirildiğinde, 
    eşleşen her alan veya değeri bir değişken adıyla bağlayabilirsiniz.


    Bir `enum` için bellek aşağıdaki gibi şekillenecektir:

    * Bellek gereksinimi, en büyük öğesinin bellek boyutu kadardır. 
    Bu şekilde, tüm olası değerlerin aynı bellek alanına sığması sağlanır.

    * Öğelerin veri türlerine ek olarak, etiket türlerini gösteren 
    sayısal değerleri bulunur.


    Ek olarak:

    * Rust'ın `enum`ları, *tagged union* olarak bilinen etiketli 
    birliklerden başka bir şey değildir.

    * Rust *cebirsel türler*e sahiptir denildiğinde anlatılmak istenen, 
    türlerin yeni bir tür oluşturmak amacıyla birleştirilmesinden başka bir şey değildir.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=377f65f1c68fd2e2375ec30513a17080
- title: Bölüm 3 - Sonuç
  content_markdown: >
    Harika! Artık fikirlerimizi kodlarla ifade edebileceğimiz temel araçlara sahibiz.
    
    Umuyorum bu bölümde Rust'un temel işlemlerinin, türleriyle nasıl özlü ve uyumlu şekilde 
    çalıştığını daha net kavrayabilmişizdir. Sonraki bölümde veri yapılarının tek bir tür yerine, 
    genellenerek türden bağımsız hale getirilmesi ve türlerin daha esnek biçimde temsilini 
    sağlayan **genel türler** kavramına değineceğiz.
