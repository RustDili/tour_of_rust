- title: Bölüm 4 - Genel Türler
  content_markdown: >
    Rust'ta genel türler oldukça önemlidir. 
    
   Halihazırda bu türler, veri içermeyen *null* değerlerin temsilinde, hata işleme yöntemlerinde 
   ve koleksiyonlar ile çalışırken sıklıkla karşımıza çıkarlar. Bu bölümde, bilgilerimiz çeşitlendikçe 
   daha sık kullanmaya yelteneceğimiz genel türlerin temellerini öğreneceğiz. 
- title: Genel TürLer Nelerdir?
  content_markdown: >
    Derleyicinin kısmen tanımladığımız bir yapı (`struct`) yahut numaralandırmayı (`enum`), kodun kullanım 
    şekline göre değerlendirip, mükemmel şekilde tanımlanmış **derleme zamanı sürümü**nü oluşturmasına olanak 
    sağlayan genelleştirilmiş türlerdir.


    Türün genellendiği bir programdaki nihai tür, derleyici tarafından kod bağlamı değerlendirilerek elde edilir. 
    Bununla birlikte bazı durumlarda, tür çıkarsama işlemi karmaşaya neden olabileceğinden, türün açıkça bildirilmesi gerekebilir. 
    Bu gibi durumlarda bir yengecin en iyi arkadaşı olan ve benimde çok sevdiğim, `turbofish` adıyla bilinen `::<T>` işlecini kullanabilirsiniz.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=e44e412895772e08f12871e1270c9e31
- title: Boş Değer Gösterimi
  content_markdown: >
    Pek çok programlama dilinde `null` anahtar sözcüğü, değerin yokluğunu
    temsil etmek için kullanılır. Değişkenler veya nesne alanlarıyla 
    etkileşime giren bir kodda bu değerin olup olmadığının kontrol edilmiyor
    oluşu önemli sorunları da beraberinde getirebilir.


    Rust'ta `null` anahtar kelimesi olmamasına rağmen boş değer kavramı 
    ihmal edilmez. Bir değerin yokluğu **enum** türü kullanarak temsil 
    edilebilir.


    Rust'ta `null` değerlerin yokluğu, olmayan değerlerin olası tüm hallerini temsil eden ve **hiç biri** 
    anlamına gelen `None` ifadesinin, genelleştirilen türler aracılığıyla kullanılmasına neden olur.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=ec66249d0fff94707bdda579060a80ca
- title: Option
  content_markdown: >
    Rust'ta yerleşik olarak gelen ve boş değerleri `null` kullanmadan temsil etmemize izin veren `Option` adında 
    genelleştirilmiş bir `enum` türü bulunur.


    ```
    enum Option<T> {
        None,
        Some(T),
    }
    ```


    Bu enum türünün kullanımı o kadar yaygındır ki, bunun bir örneğini `Some` ve `None` 
    varyantları yardımıyla kolaylıkla oluşturabilirsiniz.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=0ae77577b8a9f15125029127d9584d66
- title: Result
  content_markdown: >
    Rust yerleşik olarak gelen ve başarısız olma ihtimali taşıyan bir değer 
    döndürmemize izin veren `Result` adlı jenerik bir *enum* türüne de sahiptir. 
    Bu Rust'ta hataları ele almanın deyimsel bir yoludur.


    ```
    enum Result<T, E> {
        Ok(T),
        Err(E),
    }
    ```


    Bu jenerik türün, virgülle ayrılmış halde *parametreleştirilmiş* iki 
    farklı türden oluştuğuna dikkat edin.


    Oldukça yaygın olarak kullanılan bu türün örneklerini dilediğiniz yer 
    ve zamanda `Ok` ve `Err` anahtar sözcükleriyle oluşturulabilirsiniz.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=37d20e2176db59ae5783b89bd38d52d7
- title: Main İşlevinden Hata Döndürme
  content_markdown: |
    Programlarımızn giriş noktası olan `main` işlevi, `Result` yapısı döndürme özelliğine sahiptir!
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=2943c07fa344de6126486e7baf100eec
- title: Zarif Hata İşleme
  content_markdown: >
    `Result` türü o kadar yaygın kullanılmaktadır ki, Rust kendisiyle çalışabilmek 
    için güçlü bir `?` işleci sunar. Aşağıdaki iki ifade birbirinin eşdeğeridir:


    ```

    basarisiz_durum_olustur()?

    ```


    ```

    match basarisiz_durum_olustur() {
        Ok(d) => d,
        Err(e) => return Err(e),
    }

    ```
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=fd595fdb472487112b142315a5c5872e
- title: Kaba Option/Result İşleme
  content_markdown: >
    Kodlarınızı hızlıca yazıp tamamlamak istediğinizde, `Option`/`Result` türülerinin 
    her birini ayrı ayrı ele almak oldukça yorucu olabilir. Böyle hallerde iki 
    türün de sağladığı ve kodunuzu hızlı ancak kaba şekilde tamamlamanıza olanak 
    sağlayan `unwrap` adındaki işlevden yararlanabilirsiniz. `unwrap` işlevi 
    aşağıdaki gibi çalışır: 
     
    1. Option/Result içindeki değeri alın,

    2. Eğer enum türü None/Err türündeyse `panic!` kodunu oluşturun. 
    *Panik üretildiğinde Rust programlarının işletilmeleri bir hata mesajı eşliğinde durdurulur.*


    Bu iki kod parçası eşdeğerdir:


    ```

    my_option.unwrap()

    ```


    ```

    match my_option {
        Some(v) => v,
        None => panic!("Rust'ın hata mesajları!"),
    }

    ```


    Benzer şekilde:


    ```

    my_result.unwrap()

    ```


    ```

    match my_result {
        Ok(v) => v,
        Err(e) => panic!("Rust'ın hata mesajları!!"),
    }

    ```


    İyi bir **rustacean** olun ve gerektiğinde `match` ifadesini doğru şekilde kullanın!
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=c6cbfcbf896a9a9570a769078db7d6c7
- title: Vektörler
  content_markdown: >
    Koleksiyonlar en kullanışlı jenerik türlerdendir. Bir koleksiyon türü olan
    `Vec` yapısı, içeriği dinamik olarak değişebilen dizidir.

    Bir vektörü elle oluşturmak yerine `vec!` makrosunu kullanarak kolaylıkla oluşturabilirsiniz.


    `Vec`, vektör elemanları üzerinde yineleyici oluşturan `iter()` metoduna 
    sahip olduğundan for döngüsü yardımıyla her bir elemanı üzerinde 
    yineleme işlemi gerçekleştirilebilir.


    Bir vektör için bellek aşağıdaki gibi şekillenecektir:

    * ``Vec` bir yapı olmakla beraber, dahili olarak heap üzerindeki 
    öğelerinin sabit uzunluktaki listesine referans içerir.

    * Belleğin heap bölgesinde varsayılan bir kapasiteyle oluşturulduğundan, 
    kapasite yetmediğinde daha büyük bir kapasiteyle yeniden konumlandırılırlar.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=3dcf1f039ab999e485d2c6e562024479
- title: Bölüm 4 - Sonuç
  content_markdown: >
    Bu bölümde jenerik türlerin bizi ne kadar güçlendirdiğini öğrendik!
    Her ne kadar burada öğrendiklerimizin nasıl kullanılacağını tam olarak 
    kavrayamamış olsanız da kodlarımızda defalarca karşılaşacağınız ana 
    fikirlere dikkat etmeniz yeterlidir. İşlevlerimiz yoğunlaşıyor! 
    Bir sonraki bölümümüzü Rust'ın önemli kavramlarından biri olan 
    **Veri Mülkiyeti**ni incelemeye ayıracağız.
